import React, { useEffect } from "react";
import CartItem from '../CartItem';
import Auth from '../../utils/auth';
import './style.css';
// use the custom useStoreContext Hook to establish a state variable and the dispatch() function to update the state
import { useStoreContext } from '../../utils/GlobalState';
import { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from "../../utils/actions";
// idb:
import { idbPromise } from "../../utils/helpers";
// stripe:
import { QUERY_CHECKOUT } from '../../utils/queries';
import { loadStripe } from '@stripe/stripe-js';
// implement this new Hook to call QUERY_CHECKOUT
import { useLazyQuery } from '@apollo/client';

// use this stripePromise object to perform the checkout redirect
const stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');

const Cart = () => {

  const [state, dispatch] = useStoreContext();

  // `data` variable will contain the checkout session, but only after the query is called with the getCheckout() function
  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);

  // to check if there's anything in the state's cart property on load. If not, retrieve data from the idb cart object store & save to the global state object
  useEffect(() => {
    async function getCart() {
      const cart = await idbPromise('cart', 'get');
      // dispatch ADD_MULTIPLE_TO_CART action here because we have an array of items returning from idb, even if it's just one product saved
      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });
    };
  
    if (!state.cart.length) {
      getCart();
    }
  }, [state.cart.length, dispatch]);

  function toggleCart() {
    dispatch({ type: TOGGLE_CART }); // dispatch() will call the TOGGLE_CART action
  }

  // add up prices of everything saved in state.cart
  function calculateTotal() {
    let sum = 0;
    state.cart.forEach(item => {
      sum += item.price * item.purchaseQuantity;
    });
    return sum.toFixed(2);
  }

  // stripe checkout:
  // we can't call useQuery(QUERY_CHECKOUT) in the click handler function (JSX). The useQuery Hook is meant to run when a component is first rendered, not at a later point in time based on a user action like a button click
  //  but can use useLazyQuery Hook which can be declared like any other Hook but won't actually execute until you tell it to
  function submitCheckout() {
    const productIds = [];
  
    // When the user clicks Checkout, this function will loop over the items saved in state.cart and add their IDs to a new productIds array, so QUERY_CHECKOUT can generate the stripe session
    state.cart.forEach((item) => {
      for (let i = 0; i < item.purchaseQuantity; i++) {
        productIds.push(item._id);
      }
    });

    // call the useLazyQuery hook to run QUERY_CHECKOUT's getCheckout()
    getCheckout({
      variables: { products: productIds }
    });
  }
  
  // for stripe: to retrieve session id after generated by clicking checkout
  useEffect(() => {
    // use the stripePromise object to redirect to Stripe once there's data from useLazyQuery hook
    if (data) { 
      stripePromise.then((res) => {
        res.redirectToCheckout({ sessionId: data.checkout.session });
      });
    }
  }, [data]);

  // If cartOpen is false, the component will return a much smaller <div>. Clicking this <div>, however, will set cartOpen to true and return the expanded shopping cart
  if (!state.cartOpen) {
    return (
      <div className="cart-closed" onClick={toggleCart}>
        {/* should always wrap emojis/icon in a <span> element that includes role and aria-label attributes to help screen readers */}
        <span
          role="img"
          aria-label="trash">ðŸ›’</span>
      </div>
    );
  }
  console.log(state)

  return (
    <div className="cart">
      <div className="close" onClick={toggleCart}>[close]</div>
      <h2>Shopping Cart</h2>
      {state.cart.length ? (
        <div>
        {state.cart.map(item => (
            <CartItem key={item._id} item={item} />
        ))}
        <div className="flex-row space-between">
            <strong>Total: ${calculateTotal()}</strong>
            {
            Auth.loggedIn() ?
                <button onClick={submitCheckout}>
                Checkout
                </button>
                :
                <span>(log in to check out)</span>
            }
        </div>
        </div>
    ) : (
        <h3>
        <span role="img" aria-label="shocked">
            ðŸ˜±
        </span>
        You haven't added anything to your cart yet!
        </h3>
        )}
    </div>
  );
};

export default Cart;